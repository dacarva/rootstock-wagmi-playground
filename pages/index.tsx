import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useAccount } from "wagmi";
import {
	getBalance,
	readContract,
	writeContract,
	waitForTransactionReceipt,
} from "@wagmi/core";
import { erc20Abi, parseUnits } from "viem";
import { wagmiConfig } from "../config";

const DOC_ADDRESS_TESTNET = "0xcb46c0ddc60d18efeb0e586c17af6ea36452dae0";

const Home: NextPage = () => {
	const account = useAccount();

	const testAccount = () => {
		if (!account) return console.log("No account");
		console.log(account);
	};

	const getUserBalance = async () => {
		try {
			if (!account || !account.address) throw new Error("No account");

			const rbtcBalance = await getBalance(wagmiConfig, {
				address: account.address,
			});
			console.log("ðŸš€ ~ getUserBalance ~ rbtcBalance:", rbtcBalance);

			const docBalance = await getBalance(wagmiConfig, {
				address: account.address,
				token: DOC_ADDRESS_TESTNET,
			});
			console.log("ðŸš€ ~ getUserBalance ~ docBalance:", docBalance);
		} catch (error) {
			console.error(error);
		}
	};

	const readDocContract = async () => {
		try {
			console.log("Reading DOC Contract");
			const docSupply = await readContract(wagmiConfig, {
				abi: erc20Abi,
				address: DOC_ADDRESS_TESTNET,
				functionName: "totalSupply",
				args: [],
			});
			const docDecimals = await readContract(wagmiConfig, {
				abi: erc20Abi,
				address: DOC_ADDRESS_TESTNET,
				functionName: "decimals",
				args: [],
			});
			console.log(
				"ðŸš€ ~ readDocContract ~ docSupply:",
				Number(docSupply) / 10 ** docDecimals
			);
		} catch (error) {
			console.error(error);
		}
	};

	const transferDOC = async () => {
		console.log("Transfering DOC");
		try {
			const DESTINATION_ACCOUNT = "0x30Cd379534cE6C15eC08f00FF156166A2C7D1541";
			const amount = 10;
			const parsedAmount = parseUnits(amount.toString(), 18);

			const transferTransaction = await writeContract(wagmiConfig, {
				abi: erc20Abi,
				address: DOC_ADDRESS_TESTNET,
				functionName: "transfer",
				args: [DESTINATION_ACCOUNT, parsedAmount],
			});
			const txReceipt = await waitForTransactionReceipt(wagmiConfig, {
				hash: transferTransaction,
			});
			console.log("ðŸš€ ~ transferDOC ~ txReceipt:", txReceipt);
		} catch (error) {
			console.error(error);
		}
	};

	return (
		<div className={styles.container}>
			<Head>
				<title>RainbowKit App</title>
				<meta
					content="Generated by @rainbow-me/create-rainbowkit"
					name="description"
				/>
				<link href="/favicon.ico" rel="icon" />
			</Head>

			<main className={styles.main}>
				<ConnectButton />

				<h1 className={styles.title}>
					Welcome to <a href="">RainbowKit</a> + <a href="">wagmi</a> +{" "}
					<a href="https://nextjs.org">Next.js!</a>
				</h1>

				<p className={styles.description}>
					Get started by editing{" "}
					<code className={styles.code}>pages/index.tsx</code>
				</p>

				<div className={styles.grid}>
					<button onClick={testAccount}>Test account</button>
					<br />
					<button onClick={getUserBalance}>
						Fetch user balance and DOC balance
					</button>
					<button onClick={readDocContract}>readDocContract</button>
					<button onClick={transferDOC}>transfer DOC</button>
				</div>
			</main>
		</div>
	);
};

export default Home;
